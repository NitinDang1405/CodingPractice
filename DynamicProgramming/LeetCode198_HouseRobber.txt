https://leetcode.com/problems/house-robber/

Solution 1: Recursion 
class Solution {
public:
    int robFrom(vector<int> &nums, int *dp, int pos){
        if(pos>=nums.size()) return 0;
        if(dp[pos]!=-1){
            return dp[pos];
        }
        
        dp[pos]=max(robFrom(nums, dp, pos+1), nums[pos]+robFrom(nums, dp, pos+2));
        
        return dp[pos];
    }
    int rob(vector<int>& nums) {
        
        int n= nums.size();
        int *dp = new int[n];
        
        for(int i=0;i<n;i++){
            dp[i]=-1;
        }
        
        int pos=0;
        
        return robFrom(nums, dp, pos);
    }
};


Solution 2: Bottom Up DP (Tabulation)
class Solution {
public:
    int rob(vector<int>& nums) {
        
        int n= nums.size();
        
        if(n==0) return 0;
        
        int *dp= new int[n+1];
        dp[n]=0;
        dp[n-1]=nums[n-1];
        
        for(int i=n-2;i>=0;i--){
            dp[i]= max(nums[i]+dp[i+2], dp[i+1]);
        }
        
        
        return dp[0];
    }
};


Solution 3 : Bottom Up without space
class Solution {
public:
    int rob(vector<int>& nums) {
        int n= nums.size();
        if(n==0) return 0;
        
        int robNext=nums[n-1];
        int robNextPlusOne=0;
        
        
        for(int i=n-2; i>=0; i--){
            int current = max(robNext, nums[i]+ robNextPlusOne);
            robNextPlusOne= robNext;
            robNext= current;
        }
        
        return robNext;
    }
};
