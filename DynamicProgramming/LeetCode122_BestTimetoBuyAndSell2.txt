https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/


Solution 1: Recursive approach
class Solution {
public:
    int solve(int index, int buy, vector<int> &prices){
        if(index==prices.size()){
            return 0;
        }
        int profit=0;
        if(buy){
            int buyKaro= -prices[index]+ solve(index+1, 0, prices);
            int skipKaro= 0+ solve(index+1, 1, prices);
            profit=max(buyKaro, skipKaro);
            
        }else{
            int sellKaro=prices[index]+ solve(index+1, 1, prices);
            int skipKaro=0+solve(index+1, 0, prices);
            
            profit= max(sellKaro, skipKaro);
        }
        
        return profit;
    }
    int maxProfit(vector<int>& prices) {
        
        return solve(0, 1, prices);
    }
};


Solution 2: Memoization on the above recursive solution
class Solution {
public:
    int solve(int index, int buy, vector<int> &prices, vector<vector<int>> &dp){
        if(index==prices.size()){
            return 0;
        }
        
        if(dp[index][buy]!=-1) return dp[index][buy];
        int profit=0;
        if(buy){
            int buyKaro= -prices[index]+ solve(index+1, 0, prices, dp);
            int skipKaro= 0+ solve(index+1, 1, prices, dp);
            profit=max(buyKaro, skipKaro);
            
        }else{
            int sellKaro=prices[index]+ solve(index+1, 1, prices, dp);
            int skipKaro=0+solve(index+1, 0, prices, dp);
            
            profit= max(sellKaro, skipKaro);
        }
        
        return dp[index][buy]=profit;
    }
    int maxProfit(vector<int>& prices) {
         int n= prices.size();
        vector<vector<int>>dp(n, vector<int>(2, -1));
        return solve(0, 1, prices, dp);
    }
};

Solution 3: Converting above memoization solution(top down) to bottom up
class Solution {
public:
    int solveTab(vector<int> &prices){
        int n=prices.size();
        vector<vector<int>> dp(n+1, vector<int>(2,0));
        
        int profit=0;
        for(int i=n-1; i>=0; i--){
           for(int buy=0;buy<=1;buy++){
               if(buy){
                   int buyKaro=-prices[i]+dp[i+1][0];
                   int ignore=0+ dp[i+1][1];
                   profit=max(ignore,buyKaro);
               }else{
                   int sellKaro=prices[i]+dp[i+1][1];
                   int ignore=0+dp[i+1][0];
                   profit=max(ignore,sellKaro);
               }
               dp[i][buy]=profit;
           }
        }
        
        return dp[0][1];
    }
    int maxProfit(vector<int>& prices) {
        return solveTab(prices);
    }
};


Solution 4: Optimizing the space complexity in the above solution (U can use 2 separate next and curr vectors as well for optimization)
class Solution {
public:
    int solveTab(vector<int> &prices){
        int n=prices.size();
        vector<vector<int>> dp(2, vector<int>(2,0));
        
        int profit=0;
        for(int i=n-1; i>=0; i--){
           for(int buy=0;buy<=1;buy++){
               if(buy){
                   int buyKaro=-prices[i]+dp[(i+1)%2][0];
                   int ignore=0+ dp[(i+1)%2][1];
                   profit=max(ignore,buyKaro);
               }else{
                   int sellKaro=prices[i]+dp[(i+1)%2][1];
                   int ignore=0+dp[(i+1)%2][0];
                   profit=max(ignore,sellKaro);
               }
               dp[i%2][buy]=profit;
           }
        }
        
        return dp[0][1];
    }
    int maxProfit(vector<int>& prices) {
        return solveTab(prices);
    }
};


Solution 5: Single Pass Approach
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        
        int maxProfit=0;
        int n =prices.size();
        for(int i=1; i<n;i++){
            if(prices[i]>prices[i-1]){
                maxProfit+=prices[i]-prices[i-1];
            }
        }
        
        return maxProfit;
    }
};