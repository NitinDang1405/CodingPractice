https://leetcode.com/problems/n-th-tribonacci-number/

Solution 1:
class Solution {
public:
    int tribonacci(int n) {
        
        if (n==0) return 0;
        if(n==1 or n==2) return 1;
        
        int prev1=1;
        int prev2=1;
        int prev3=0;
        
        int current=0;
        
        for(int i=3;i<=n;i++){
            current=prev1+prev2+prev3;
            prev3=prev2;
            prev2=prev1;
            prev1=current;
        }
        
        return current;
    }
};

Solution 2 : LeetCode (PreCompute Values and use in all test cases)
class Tri {
  private int n = 38;
  public int[] nums = new int[n];
  Tri() {
    nums[1] = 1;
    nums[2] = 1;
    for (int i = 3; i < n; ++i)
      nums[i] = nums[i - 1] + nums[i - 2] + nums[i - 3];
  }
}

class Solution {
  public static Tri t = new Tri();
  public int tribonacci(int n) {
    return t.nums[n];
  }
}