https://leetcode.com/problems/min-cost-climbing-stairs/

Solution 1: Using array
class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        
        int n= cost.size();
        
        if(n==0) return 0;
        if(n==1) return cost[0];
        if(n==2) return min(cost[0], cost[1]);
        
        int *result = new int[n+1]();
        
        result[0]=cost[0];
        result[1]=cost[1];
        
        for(int i=2;i<n;i++){
            
            result[i]= cost[i]+ min(result[i-1],result[i-2]);
        }
        
        
        return min(result[n-1],result[n-2]);
        
    }
};


Solution 2: Using variables instead of array since I only need to know the cost from the last two places and then add the current index cost to it.
class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        
        int n= cost.size();
        
        if(n==0) return 0;
        if(n==1) return cost[0];
        if(n==2) return min(cost[0], cost[1]);
        
        int prevResult1=cost[1];
        int prevResult2=cost[0];
    
        
        for(int i=2;i<n;i++){
            
            int temp=prevResult1;
            prevResult1=cost[i] + min(temp,prevResult2);
            prevResult2=temp;
        }
        
        
        return min(prevResult1, prevResult2);
        
    }
};