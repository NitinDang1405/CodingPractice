/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
https://leetcode.com/problems/merge-two-sorted-lists/


Solution 1:
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        
        ListNode *head1=list1;
        ListNode *head2=list2;
        ListNode *prehead= new ListNode(-1);
        ListNode *prev=prehead;
        
        while(head1!=NULL && head2!=NULL){
            if(head1->val <=head2->val){
                prev->next=head1;
                head1=head1->next;
            }else{
                prev->next=head2;
                head2=head2->next;
            }
            prev=prev->next;
        }
        
        if(head1!=NULL){
            prev->next=head1;
        }else if (head2!=NULL){
            prev->next=head2;
        }
        
        return prehead->next;
    }
};


Solution 2: Recursive
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        
        if(list1==NULL){
            return list2;
        }
        if(list2==NULL){
            return list1;
        }
        
        if(list1->val<=list2->val){
            list1->next=mergeTwoLists(list1->next, list2);
            return list1;
        }else{
            list2->next=mergeTwoLists(list1, list2->next);
            return list2;
        }
    }
};