https://leetcode.com/problems/trapping-rain-water/

Solution 1:
class Solution {
public:
    int trap(vector<int>& height) {
        int n= height.size();
        if(n<=2) return 0;
        int *left= new int[n];
        int *right= new int[n];
        
        left[0]=0;
        right[n-1]=0;
        
        int leftMax=height[0];
        int rightMax=height[n-1];
        
        for(int i=1;i<n;i++){
            left[i]=leftMax;
            leftMax= max(leftMax, height[i]);
        }
        
        for(int i=n-2;i>=0;i--){
            right[i]=rightMax;
            rightMax=max(rightMax, height[i]);
        }
        
        int trapping=0;
        
        for(int i=1;i<n-1;i++){
            if(height[i]<left[i] and height[i]<right[i]){
                trapping += ( min(left[i], right[i]) -height[i]);
            }
        }
        
        return trapping;
    }
};



Solution 2:
class Solution {
public:
    int trap(vector<int>& height) {
        
        int  n=height.size();
        if(n<=2) return 0;
        int leftMax=height[0];
        int rightMax=height[n-1];
        int left=1, right=n-2;
        int trapping =0;
        while(left<=right){
            if(leftMax< rightMax){
                if(height[left]>leftMax){
                    leftMax=height[left];
                }else{
                    trapping+=(leftMax-height[left]);
                    
                }
                left++;
            }else{
                if(height[right]>rightMax){
                    rightMax=height[right];
                }else{
                    trapping+=(rightMax-height[right]);
                    
                }
                right--;
            }
        }
        return trapping;
    }
};