https://practice.geeksforgeeks.org/problems/n-meetings-in-one-room-1587115620/1?utm_source=gfg&utm_medium=article&utm_campaign=bottom_sticky_on_article

Solution:
//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution
{
    public:
    
    static bool cmp(pair<int, int> a, pair<int, int> b){
        return a.second<b.second;
    }
    //Function to find the maximum number of meetings that can
    //be performed in a meeting room.
    int maxMeetings(int start[], int end[], int n)
    {
        // Your code here
        vector<pair<int, int>> Meetings;
        
        for(int i=0;i<n;i++){
            Meetings.push_back(make_pair(start[i], end[i]));
        }
        sort(Meetings.begin(), Meetings.end(), cmp);
        int count=1;
        int ans=Meetings[0].second;
        
        for(int i=1; i<n ;i++){
            if(Meetings[i].first>ans){
                count++;
                ans=Meetings[i].second;
            }
        }
        return count;
    }
};

//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        int start[n], end[n];
        for (int i = 0; i < n; i++) cin >> start[i];

        for (int i = 0; i < n; i++) cin >> end[i];

        Solution ob;
        int ans = ob.maxMeetings(start, end, n);
        cout << ans << endl;
    }
    return 0;
}
// } Driver Code Ends